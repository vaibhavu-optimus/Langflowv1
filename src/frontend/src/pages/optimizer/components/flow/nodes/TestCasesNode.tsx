import React, { useState, useRef, useEffect } from 'react';
import { Handle, Position, NodeProps } from 'reactflow';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Loader2, Plus, Trash2, Upload, Download, Info } from 'lucide-react';
import { useFlowStore } from '../../../../../stores/flowstoreNew';
import { TestCasesNodeData } from '../../../../../types/flowTypes';
import { ModelSelector } from '../../model-selector';
import { useToast } from '../../../../../hooks/use-toast';
import { downloadAsText } from '../../../../../lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

// Default test cases for when none exist
const DEFAULT_TEST_CASES = [
  "Can you help me with a problem I'm having?",
  "Tell me about the benefits of regular exercise.",
  "What's the capital of France?",
  "How do I fix a leaky faucet?",
  "Write a short poem about nature."
];

// Test Cases Node component
const TestCasesNode: React.FC<NodeProps<TestCasesNodeData>> = ({ id, data }) => {
  const [modelConfig, setModelConfig] = useState(data.modelConfig);
  const [newTestCase, setNewTestCase] = useState('');
  const [error, setError] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { updateNodeData } = useFlowStore();
  const { toast } = useToast();

  // Update model config when data changes
  useEffect(() => {
    if (data.modelConfig !== modelConfig) {
      setModelConfig(data.modelConfig);
    }
  }, [data.modelConfig, modelConfig]);

  // Handle adding a test case
  const handleAddTestCase = () => {
    if (!newTestCase.trim()) {
      setError("Please enter a test case");
      toast({
        title: 'Error',
        description: 'Please enter a test case',
        variant: 'destructive',
      });
      return;
    }

    // Reset error
    setError(null);

    const newCase = {
      id: data.testCases.length,
      metaPromptId: data.metaPrompt?.id || 0,
      input: newTestCase,
      isAutoGenerated: false,
    };

    updateNodeData(id, {
      testCases: [...data.testCases, newCase]
    });

    setNewTestCase('');
  };

  // Handle adding default test cases
  const handleAddDefaultTestCases = () => {
    const existingIds = new Set(data.testCases.map(tc => tc.id));
    let nextId = 0;
    while (existingIds.has(nextId)) nextId++;

    const newTestCases = DEFAULT_TEST_CASES.map((input, index) => ({
      id: nextId + index,
      metaPromptId: data.metaPrompt?.id || 0,
      input,
      isAutoGenerated: false,
    }));

    updateNodeData(id, {
      testCases: [...data.testCases, ...newTestCases]
    });

    toast({
      title: 'Default Test Cases Added',
      description: `Added ${DEFAULT_TEST_CASES.length} default test cases`,
    });
  };

  // Handle removing a test case
  const handleRemoveTestCase = (testCaseId: number) => {
    const updatedTestCases = data.testCases.filter(tc => tc.id !== testCaseId);
    updateNodeData(id, { testCases: updatedTestCases });
  };

  // Handle editing a test case
  const handleEditTestCase = (testCaseId: number, input: string) => {
    const updatedTestCases = data.testCases.map(tc => 
      tc.id === testCaseId ? { ...tc, input } : tc
    );
    updateNodeData(id, { testCases: updatedTestCases });
  };

  // Handle file upload
  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const content = e.target?.result as string;
        const inputs = content.split('\n').filter(Boolean);
        
        if (inputs.length === 0) {
          throw new Error("No valid test cases found in file");
        }
        
        const existingIds = new Set(data.testCases.map(tc => tc.id));
        let nextId = 0;
        while (existingIds.has(nextId)) nextId++;
        
        const newTestCases = inputs.map((input, index) => ({
          id: nextId + index,
          metaPromptId: data.metaPrompt?.id || 0,
          input: input.trim(),
          isAutoGenerated: false,
        }));

        updateNodeData(id, {
          testCases: [...data.testCases, ...newTestCases]
        });

        toast({
          title: 'Success',
          description: `Imported ${newTestCases.length} test cases`,
        });
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Failed to parse file';
        setError(errorMessage);
        toast({
          title: 'Import Failed',
          description: errorMessage,
          variant: 'destructive',
        });
      }
    };
    
    reader.onerror = () => {
      setError("Failed to read file");
      toast({
        title: 'Import Failed',
        description: 'Failed to read file',
        variant: 'destructive',
      });
    };
    
    reader.readAsText(file);
    
    // Reset the file input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // Handle exporting test cases
  const handleExportTestCases = () => {
    if (data.testCases.length === 0) {
      toast({
        title: 'No Test Cases',
        description: 'There are no test cases to export',
        variant: 'destructive',
      });
      return;
    }

    const content = data.testCases.map(tc => tc.input).join('\n');
    downloadAsText(content, 'test-cases.txt');
    
    toast({
      title: 'Test Cases Exported',
      description: `Exported ${data.testCases.length} test cases`,
    });
  };

  // Handle proceed to evaluation
  const handleProceedToEvaluation = () => {
    if (data.testCases.length === 0) {
      setError("Please add at least one test case");
      toast({
        title: 'Error',
        description: 'Please add at least one test case',
        variant: 'destructive',
      });
      return;
    }

    // Reset error
    setError(null);

    // Get the variations node to pass data to evaluation
    const variationsNode = useFlowStore.getState().getNodeByType('variationsNode');
    
    if (!variationsNode || variationsNode.data?.variations?.length === 0) {
      setError("No variations found for evaluation");
      toast({
        title: 'Error',
        description: 'No variations found for evaluation',
        variant: 'destructive',
      });
      return;
    }

    // Update evaluation node
    const evaluationNode = useFlowStore.getState().getNodeByType('evaluationNode');
    if (evaluationNode) {
      updateNodeData(evaluationNode.id, {
          variations: variationsNode.data?.variations,
        testCases: data.testCases,
        modelConfig
      });
    }

    toast({
      title: 'Ready',
      description: 'Test cases prepared for evaluation',
    });
  };

  return (
    <Card className="w-96 shadow-md">
      <CardHeader className="bg-primary/10 py-3 flex flex-row items-center justify-between">
        <CardTitle className="text-lg flex items-center">
          Test Cases
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Info className="h-4 w-4 ml-2 cursor-help text-muted-foreground" />
              </TooltipTrigger>
              <TooltipContent>
                <p className="max-w-xs">
                  These inputs will be used to test each prompt variation. You can generate, add manually, or import from a file.
                </p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </CardTitle>
        
        <div className="flex gap-1">
          <Button
            variant="ghost"
            size="icon"
            onClick={handleExportTestCases}
            disabled={data.testCases.length === 0}
            title="Export test cases"
          >
            <Download className="h-4 w-4" />
          </Button>
          
          <Button
            variant="ghost"
            size="icon"
            onClick={() => fileInputRef.current?.click()}
            title="Import test cases"
          >
            <Upload className="h-4 w-4" />
          </Button>
        </div>
      </CardHeader>
      <CardContent className="pt-4 space-y-4">
        {data.isGenerating ? (
          <div className="flex flex-col justify-center items-center h-40 gap-2">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
            <span className="text-sm text-muted-foreground">Generating test cases...</span>
          </div>
        ) : (
          <div className="space-y-4">
            <div className="space-y-2">
              <Label>Model Configuration</Label>
              <ModelSelector
                value={modelConfig}
                onChange={(newConfig) => {
                  console.log("ðŸŸ¡ ModelSelector Change Triggered:", newConfig); 
                  setModelConfig(newConfig);
                  updateNodeData(id, { modelConfig: newConfig }); 
          }}/>
            </div>

            <div className="flex gap-2">
              <input
                type="file"
                accept=".txt"
                onChange={handleFileUpload}
                className="hidden"
                ref={fileInputRef}
              />
              <Button 
                variant="outline" 
                onClick={() => fileInputRef.current?.click()}
                className="flex-1"
              >
                <Upload className="h-4 w-4 mr-2" />
                Upload .txt File
              </Button>
              
              <Button
                variant="outline"
                onClick={handleAddDefaultTestCases}
                className="flex-1"
              >
                <Plus className="h-4 w-4 mr-2" />
                Add Default Cases
              </Button>
            </div>

            <div className="space-y-2">
              <Label>Add Test Case</Label>
              <div className="flex gap-2">
                <Textarea
                  value={newTestCase}
                  onChange={(e) => {
                    setNewTestCase(e.target.value);
                    setError(null);
                  }}
                  placeholder="Enter a test case..."
                  className={`flex-1 ${error ? 'border-red-500 focus-visible:ring-red-500' : ''}`}
                />
                <Button onClick={handleAddTestCase}>
                  <Plus className="h-4 w-4" />
                </Button>
              </div>
              {error && <p className="text-sm text-red-500">{error}</p>}
            </div>

            {data.testCases.length > 0 ? (
              <div className="border rounded-md overflow-hidden">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-12">#</TableHead>
                      <TableHead>Test Case</TableHead>
                      <TableHead className="w-16">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {data.testCases.map((testCase, index) => (
                      <TableRow key={testCase.id}>
                        <TableCell className="font-mono text-sm text-muted-foreground">
                          {index + 1}
                        </TableCell>
                        <TableCell>
                          <Textarea
                            value={testCase.input}
                            onChange={(e) => handleEditTestCase(testCase.id, e.target.value)}
                            className="min-h-8 resize-none text-sm border-none focus-visible:ring-0 p-0"
                          />
                        </TableCell>
                        <TableCell>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleRemoveTestCase(testCase.id)}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            ) : (
              <div className="text-center py-4 text-muted-foreground">
                <p>No test cases yet. Generate or add some to continue.</p>
              </div>
            )}

            <Button
              onClick={handleProceedToEvaluation}
              className="w-full"
              disabled={data.testCases.length === 0}
            >
              Prepare for Evaluation
            </Button>
          </div>
        )}
      </CardContent>

      {/* Input handle */}
      <Handle
        type="target"
        position={Position.Top}
        id="input"
        className="w-3 h-3 bg-primary"
      />

      {/* Output handle */}
      <Handle
        type="source"
        position={Position.Bottom}
        id="output"
        className="w-3 h-3 bg-primary"
      />
    </Card>
  );
};

export default TestCasesNode;
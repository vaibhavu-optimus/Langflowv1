import { z } from 'zod';

// Model provider type
export type ModelProvider = 'openai' | 'anthropic' | 'google' | 'groq';

// Model configuration
export const modelConfigSchema = z.object({
  provider: z.enum(['openai', 'anthropic', 'google', 'groq']),
  model: z.string(),
  temperature: z.number().min(0).max(2).default(0.7),
  maxTokens: z.number().min(1).default(2048),
  topP: z.number().min(0).max(1).default(1),
  // Add provider-specific parameters
  frequencyPenalty: z.number().min(-2).max(2).optional(),
  presencePenalty: z.number().min(-2).max(2).optional(),
  topK: z.number().min(1).optional(),
  apiKey: z.string().optional()
});

export type ModelConfig = z.infer<typeof modelConfigSchema>;

// Meta prompt
export const createMetaPromptSchema = z.object({
  basePrompt: z.string(),
  generatedPrompt: z.string(),
  modelConfig: modelConfigSchema
});

export const metaPromptSchema = createMetaPromptSchema.extend({
  id: z.number()
});

export type CreateMetaPrompt = z.infer<typeof createMetaPromptSchema>;
export type MetaPrompt = z.infer<typeof metaPromptSchema>;

// Prompt variation
export const createPromptVariationSchema = z.object({
  metaPromptId: z.number(),
  content: z.string(),
  modelConfig: modelConfigSchema
});

export const promptVariationSchema = createPromptVariationSchema.extend({
  id: z.number()
});

export type CreatePromptVariation = z.infer<typeof createPromptVariationSchema>;
export type PromptVariation = z.infer<typeof promptVariationSchema>;

// Test case
export const createTestCaseSchema = z.object({
  metaPromptId: z.number(),
  input: z.string(),
  isAutoGenerated: z.boolean().default(false)
});

export const testCaseSchema = createTestCaseSchema.extend({
  id: z.number()
});

export type CreateTestCase = z.infer<typeof createTestCaseSchema>;
export type TestCase = z.infer<typeof testCaseSchema>;

// Evaluation criterion
export const createEvaluationCriterionSchema = z.object({
  name: z.string(),
  description: z.string(),
  weight: z.number().min(1).max(5).default(1),
  modelConfig: modelConfigSchema
});

export const evaluationCriterionSchema = createEvaluationCriterionSchema.extend({
  id: z.number()
});

export type CreateEvaluationCriterion = z.infer<typeof createEvaluationCriterionSchema>;
export type EvaluationCriterion = z.infer<typeof evaluationCriterionSchema>;

// Evaluation result
export const createEvaluationResultSchema = z.object({
  variationId: z.number(),
  testCaseId: z.number(),
  criterionId: z.number(),
  score: z.number().min(0).max(10),
  response: z.string(),
  evaluatorModel: z.string()
});

export const evaluationResultSchema = createEvaluationResultSchema.extend({
  id: z.number()
});

export type CreateEvaluationResult = z.infer<typeof createEvaluationResultSchema>;
export type EvaluationResult = z.infer<typeof evaluationResultSchema>;

// Aggregated results
export const aggregatedResultsSchema = z.object({
  variationId: z.number(),
  averageScore: z.number(),
  scores: z.record(z.string(), z.number()),
  bestModelPair: z.object({
    provider: z.string(),
    model: z.string(),
    score: z.number()
  })
});

export type AggregatedResults = z.infer<typeof aggregatedResultsSchema>;

// Request schemas
export const generateMetaPromptRequestSchema = z.object({
  basePrompt: z.string(),
  modelConfig: modelConfigSchema
});

export const evaluationRequestSchema = z.object({
  response: z.string(),
  criterion: z.string(),
  modelConfig: modelConfigSchema
});

// Agent evaluation result
export const agentEvaluationResultSchema = z.object({
  variationId: z.number(),
  testCaseId: z.number(),
  criterionId: z.number(),
  score: z.number().min(0).max(10),
  reasoning: z.string(),
  agent: z.string()
});

export type AgentEvaluationResult = z.infer<typeof agentEvaluationResultSchema>;